(()=>{"use strict";class e extends AudioWorkletProcessor{constructor(){super(...arguments),this.bufferSize=4096,this.audioBuffer=new Float32Array(0)}process(e){const s=e[0];if(s.length>0&&s[0].length>0){const e=s[0];if(e){const s=new Float32Array(this.audioBuffer.length+e.length);s.set(this.audioBuffer),s.set(e,this.audioBuffer.length),this.audioBuffer=s,this.audioBuffer.length>=this.bufferSize&&(this.port.postMessage(this.audioBuffer.slice(0,this.bufferSize)),this.audioBuffer=this.audioBuffer.slice(this.bufferSize))}else console.warn("No valid audio data received in PitchProcessor.")}else console.warn("No valid input received in PitchProcessor.");return!0}}registerProcessor("pitch-processor",e)})();